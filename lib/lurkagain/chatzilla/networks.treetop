module LurkAgain
  module Chatzilla
    grammar Networks
      rule file
        START_ARRAY line_end list END_FILE {
          def networks
            list.data
          end
        }
      end
    
      rule list
        item* {
          def data
            elements.map &:data
          end
        }
      end
    
      rule item
        START spaces index:number line_end contents:content* END {
          def data
            result = {}
            contents.elements.each {|content| result[content.name.data] = content.value.data}
            result
          end
        }
      end
    
      rule content
        line_start name:string spaces value:atom line_end /
        START_ARRAY spaces name:word line_end value:list END
      end
    
      rule START_ARRAY
        line_start START spaces ARRAY
      end
    
      rule START
        'START'
      end
    
      rule END
        'END' line_end
      end
    
      rule END_FILE
        'END' line_end?
      end
    
      rule ARRAY
        '<Array>'
      end
    
      rule atom
        string / number / boolean
      end
     
      rule string
        '"' body:[^"]* '"'  { def data; body.text_value;     end }
      end
    
      rule number
        [0-9]+              { def data; Integer(text_value); end }
      end
    
      rule boolean
        'true'              { def data; true;                end } /
        'false'             { def data; false;               end }
      end
    
      rule word
        [^ \n]+             { def data; text_value;          end }
      end
    
      rule spaces
        ' '+
      end
    
      rule line_start
        ' '*
      end
    
      rule line_end
        ' '* ("\n" ' '*)+
      end
    end
  end
end

